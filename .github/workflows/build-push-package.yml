name: Docker Image CI

on:
  workflow_dispatch:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to the Container registry
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract version from tag
      if: github.event_name == 'release'
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

    - name: Set Docker tag from version
      if: github.event_name == 'release'
      run: |
        echo "CUSTOM_TAG=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}" >> $GITHUB_ENV
        echo "LATEST_TAG=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_ENV

    - name: Update pyproject.toml version
      if: github.event_name == 'release'
      run: |
        sed -i "s/^version = \".*\"/version = \"$VERSION\"/" pyproject.toml

    - name: Commit version bump
      if: github.event_name == 'release'
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git commit -am "chore: bump version to $VERSION from release tag"
        git push origin HEAD:main

    - name: Build and push Docker image
      id: push
      uses: docker/build-push-action@v6
      with:
        context: .
        file: docker/Dockerfile.prod
        push: true
        tags: |
          ${{ env.CUSTOM_TAG }}
          ${{ env.LATEST_TAG }}
          ${{ steps.meta.outputs.tags }}
        labels: |
          org.opencontainers.image.version=${{ env.VERSION }}
          ${{ steps.meta.outputs.labels }}

    - name: Generate artifact attestation
      uses: actions/attest-build-provenance@v2
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
        subject-digest: ${{ steps.push.outputs.digest }}
        push-to-registry: true
