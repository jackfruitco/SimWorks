# syntax=docker/dockerfile:1

ARG PYTHON_VERSION=3.13
FROM ghcr.io/astral-sh/uv:python${PYTHON_VERSION}-bookworm-slim AS base

WORKDIR /app

# Enable bytecode compilation
ENV UV_COMPILE_BYTECODE=1

# Copy from the cache instead of linking since it's a mounted volume
ENV UV_LINK_MODE=copy

# Use the system Python environment by default
ENV UV_SYSTEM_PYTHON=1

# Create a non-privileged user that the app will run under.
# See https://docs.docker.com/go/dockerfile-user-best-practices/
ARG UID=10001
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    appuser

# Install the project's dependencies using the lockfile and settings
# RUN --mount=type=cache,target=/root/.cache/uv \
#     --mount=type=bind,source=uv.lock,target=uv.lock \
#     --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
#     uv sync --frozen --no-install-project
RUN --mount=type=cache,target=/root/.cache/pip \
   --mount=type=bind,source=requirements.txt,target=requirements.txt \
    uv pip install --system -r requirements.txt # \

# Create Static/Media Files Directory
RUN mkdir -p /app/static && \
    mkdir -p /app/media && \
    mkdir -p /app/logs && \
    chown -R appuser:appuser /app/static && \
    chown -R appuser:appuser /app/media && \
    chown -R appuser:appuser /app/logs

# Install packages
RUN apt-get update && apt-get install -y \
    nano \
    curl

# Then, add the rest of the project source code and install it
# Installing separately from its dependencies allows optimal layer caching
ADD .. /app
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --frozen

# Expose the port that the application listens on.
EXPOSE 8000

# Check that Django Server is running
HEALTHCHECK --interval=10s --timeout=5s --start-period=10s --retries=10 CMD /app/docker/healthcheck.sh

# Switch to the non-privileged user to run the application.
# USER appuser

# Set working directory to SimWorks Django root
WORKDIR /app/SimWorks

# Run the application.
ENTRYPOINT ["/app/docker/entrypoint.dev.sh"]
